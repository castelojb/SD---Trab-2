syntax= "proto3";
import "google/protobuf/empty.proto";

// Services definitions
service GatewayService {
  rpc Identificate(Identification) returns (Identification);
  rpc ReceiveStatus(Status) returns (Status);
}

service EquipmentService {
  rpc Identificate(google.protobuf.Empty) returns (Identification);
  rpc ReceiveUpdate(UpdateStatus) returns (google.protobuf.Empty);
}

// Messages definitions
message Identification {
  string type = 1;
  string ip = 2;
  int32 port = 3;
}

// Lâmpada & sistema de irrigação ~ atuadores

message ActuatorStatus { 
  bool turnedOn = 4;
}

message TurnOnOff {
  bool turnedOn = 5;
}

// Ar-condicionado com sensor de temperatura ~ sensor

message AirConditioningStatus {
  bool turnedOn = 6;
  int32 temperature = 7;
  int32 roomTemperature = 8;
}

message Status {
  double payload = 10; // Ex: 20 (graus)
}

message UpdateStatus {
  string eventType = 9; // Ex: temperature
  double payload = 10; // Ex: 20 (graus)
}
